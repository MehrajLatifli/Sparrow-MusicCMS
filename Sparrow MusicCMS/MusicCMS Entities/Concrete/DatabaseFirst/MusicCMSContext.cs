// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using System.Collections.Generic;
using System.Diagnostics;
using System.Text;

namespace MusicCMS_Entities.Concrete.DatabaseFirst
{
    public partial class MusicCMSContext : DbContext
    {
        public MusicCMSContext()
        {
        }

        public MusicCMSContext(DbContextOptions<MusicCMSContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Album> Album { get; set; }
        public virtual DbSet<Artist> Artist { get; set; }
        public virtual DbSet<ArtistAlbum> ArtistAlbum { get; set; }
        public virtual DbSet<Music> Music { get; set; }
        public virtual DbSet<MusicAlbum> MusicAlbum { get; set; }
        public virtual DbSet<Notification> Notification { get; set; }
        public virtual DbSet<Playlist> Playlist { get; set; }
        public virtual DbSet<PlaylistMusic> PlaylistMusic { get; set; }
        public virtual DbSet<Radio> Radio { get; set; }
        public virtual DbSet<UserAccount> UserAccount { get; set; }


        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            string connection = @"Data Source=DESKTOP-EF4HGEF;Initial Catalog=MusicCMS;User ID=sa;Password=admin1234; Integrated Security=True; ApplicationIntent=ReadWrite; MultipleActiveResultSets = True; Trusted_Connection=True;";
            optionsBuilder.UseSqlServer(connection);
        }
        public override int SaveChanges()
        {
            try
            {
                return base.SaveChanges();
            }
            //catch (DbEntityValidationException vex)
            //{
            //    var exception = HandleDbEntityValidationException(vex);
            //    throw exception;
            //}
            catch (DbUpdateException dbu)
            {
                var exception = HandleDbUpdateException(dbu);
                Debug.WriteLine(exception.Message.ToString());

                throw exception;

            }
        }

        private Exception HandleDbUpdateException(DbUpdateException dbu)
        {
            var builder = new StringBuilder("A DbUpdateException was caught while saving changes. ");

            try
            {
                foreach (var result in dbu.Entries)
                {
                    builder.AppendFormat("Type: {0} was part of the problem.", result.Entity.GetType().FullName);
                }
            }
            catch (Exception e)
            {
                builder.Append("Error parsing DbUpdateException: " + e.ToString());
            }

            string message = builder.ToString();
            return new Exception(message, dbu);
        }


        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Album>(entity =>
            {
                entity.HasKey(e => e.IdAlbum)
                    .HasName("PK__Album__BF9C2A22A052B65B");

                entity.Property(e => e.AlbumName).IsRequired();

                entity.Property(e => e.ImageAlbum).IsRequired();
            });

            modelBuilder.Entity<Artist>(entity =>
            {
                entity.HasKey(e => e.IdArtist)
                    .HasName("PK__Artist__A420200795064AB6");

                entity.Property(e => e.ArtistName).IsRequired();

                entity.Property(e => e.ImageArtist).IsRequired();
            });

            modelBuilder.Entity<ArtistAlbum>(entity =>
            {
                entity.HasKey(e => e.IdArtistAlbum)
                    .HasName("PK__ArtistAl__0E34C4F1233523DB");

                entity.HasOne(d => d.AlbumId_forArtistAlbumNavigation)
                    .WithMany(p => p.ArtistAlbum)
                    .HasForeignKey(d => d.AlbumId_forArtistAlbum)
                    .HasConstraintName("FK_AlbumId_forArtistAlbum");

                entity.HasOne(d => d.ArtistId_forArtistAlbumNavigation)
                    .WithMany(p => p.ArtistAlbum)
                    .HasForeignKey(d => d.ArtistId_forArtistAlbum)
                    .HasConstraintName("FK_ArtistId_forArtistAlbum");
            });

            modelBuilder.Entity<Music>(entity =>
            {
                entity.HasKey(e => e.IdMusic)
                    .HasName("PK__Music__2E805F5FAD3AE24A");

                entity.Property(e => e.ImageMusic).IsRequired();

                entity.Property(e => e.MusicFile).IsRequired();

                entity.Property(e => e.MusicName).IsRequired();
            });

            modelBuilder.Entity<MusicAlbum>(entity =>
            {
                entity.HasKey(e => e.IdMusicAlbum)
                    .HasName("PK__MusicAlb__3CB0A7A908130F27");

                entity.HasOne(d => d.AlbumId_forMusicAlbumNavigation)
                    .WithMany(p => p.MusicAlbum)
                    .HasForeignKey(d => d.AlbumId_forMusicAlbum)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AlbumId_forMusicAlbum");

                entity.HasOne(d => d.MusicId_forMusicAlbumNavigation)
                    .WithMany(p => p.MusicAlbum)
                    .HasForeignKey(d => d.MusicId_forMusicAlbum)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MusicId_forMusicAlbum");
            });

            modelBuilder.Entity<Notification>(entity =>
            {
                entity.HasKey(e => e.IdNotification)
                    .HasName("PK__Notifica__950094B1750F8116");

                entity.Property(e => e.Messageactivity)
                    .IsRequired()
                    .HasColumnType("text");

                entity.Property(e => e.NotificationDatetime).IsRequired();

                entity.HasOne(d => d.FromUserAccountId_forNotificationNavigation)
                    .WithMany(p => p.NotificationFromUserAccountId_forNotificationNavigation)
                    .HasForeignKey(d => d.FromUserAccountId_forNotification)
                    .HasConstraintName("FK_FromUserAccountId");

                entity.HasOne(d => d.ToUserAccountId_forNotificationNavigation)
                    .WithMany(p => p.NotificationToUserAccountId_forNotificationNavigation)
                    .HasForeignKey(d => d.ToUserAccountId_forNotification)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ToUserAccountId");
            });

            modelBuilder.Entity<Playlist>(entity =>
            {
                entity.HasKey(e => e.IdPlaylist)
                    .HasName("PK__Playlist__72ACF23BA335B475");

                entity.Property(e => e.ImagePlaylist).IsRequired();

                entity.Property(e => e.PlaylistDatetime).IsRequired();

                entity.Property(e => e.PlaylistDescription).IsRequired();

                entity.Property(e => e.PlaylistName).IsRequired();

                entity.HasOne(d => d.UserAccountId_forPlaylistNavigation)
                    .WithMany(p => p.Playlist)
                    .HasForeignKey(d => d.UserAccountId_forPlaylist)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_UserAccountId");
            });

            modelBuilder.Entity<PlaylistMusic>(entity =>
            {
                entity.HasKey(e => e.IdPlaylistMusic)
                    .HasName("PK__Playlist__5EB068E31F95C765");

                entity.HasOne(d => d.MusicId_forPlaylistMusicNavigation)
                    .WithMany(p => p.PlaylistMusic)
                    .HasForeignKey(d => d.MusicId_forPlaylistMusic)
                    .HasConstraintName("FK_MusicId_forPlaylistMusic");

                entity.HasOne(d => d.PlaylistId_forPlaylistMusicNavigation)
                    .WithMany(p => p.PlaylistMusic)
                    .HasForeignKey(d => d.PlaylistId_forPlaylistMusic)
                    .HasConstraintName("FK_PlaylistId_forPlaylistMusic");
            });

            modelBuilder.Entity<Radio>(entity =>
            {
                entity.HasKey(e => e.IdRadio)
                    .HasName("PK__Radio__B273BC990298AC65");

                entity.Property(e => e.ImageRadio).IsRequired();

                entity.Property(e => e.RadioCountry).IsRequired();

                entity.Property(e => e.RadioDescription).IsRequired();

                entity.Property(e => e.RadioFile).IsRequired();

                entity.Property(e => e.RadioName).IsRequired();
            });

            modelBuilder.Entity<UserAccount>(entity =>
            {
                entity.HasKey(e => e.IdUserAccount)
                    .HasName("PK__UserAcco__E5FB84BFA78998A3");

                entity.Property(e => e.UserEmail).IsRequired();

                entity.Property(e => e.UserPassword).IsRequired();

                entity.Property(e => e.Username).IsRequired();
            });

            OnModelCreatingGeneratedProcedures(modelBuilder);
            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}